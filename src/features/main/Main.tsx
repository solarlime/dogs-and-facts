import React, { Suspense } from 'react';

import { shallowEqual } from 'react-redux';
import styles from './Main.module.css';
import { useAppDispatch, useAppSelector } from '../../app/hooks';
import { selectCardByID, selectID, toggleLike } from './MainSlice';
import getDogsAndFacts from './getDogsAndFacts';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
 */
function DogImage(props: { logo: string }) {
  const { logo } = props;
  return (
    <img src={logo} className={styles.spaMainCardsCardFigureImage} alt="dog" />
  );
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Ñ–∞–∫—Ç–∞
 */
function DogFact(props: { fact: string }) {
  const { fact } = props;
  return (
    <figcaption>
      {fact}
    </figcaption>
  );
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ª–∞–π–∫–∞"
 */
function Like(props: { id: string, liked: boolean }) {
  const dispatch = useAppDispatch();
  const { id, liked } = props;
  const toggle = () => {
    dispatch(toggleLike(id));
  };

  // –ú–µ–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è "–ª–∞–π–∫–∞"
  const isLiked = (like: boolean) => {
    const element: { class: string, content: string } = {
      class: styles.spaMainCardsCardFigureButtonsLike,
      content: 'üíôÔ∏è',
    };
    if (like) {
      return {
        class: styles.spaMainCardsCardFigureButtonsLiked,
        content: 'üíõ',
      };
    }
    return element;
  };

  const result = isLiked(liked);

  return (
    <button
      type="button"
      className={
          `${styles.spaMainCardsCardFigureButtonsButton} ${result.class}`
        }
      onClick={toggle}
    >
      {result.content}
    </button>
  );
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
 */
function Delete(props: { id: string }) {
  const dispatch = useAppDispatch();
  const { id } = props;
  const deleteAndFetchCard = () => {
    dispatch(getDogsAndFacts({ length: 1, deleteItem: id }));
  };

  return (
    <button
      type="button"
      className={`${styles.spaMainCardsCardFigureButtonsButton} ${styles.spaMainCardsCardFigureButtonsDelete}`}
      onClick={deleteAndFetchCard}
    >
      ‚ùå
    </button>
  );
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫
 */
function Buttons(props: { id: string, liked: boolean }) {
  const { liked, id } = props;
  return (
    <div className={styles.spaMainCardsCardFigureButtons}>
      <Like id={id} liked={liked} />
      <Delete id={id} />
    </div>
  );
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–∏. –ù–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ (–∞ –Ω–µ –≤—ã—à–µ) –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
 */
function Card(props: { id: string }) {
  const { id } = props;
  const card = useAppSelector((state) => selectCardByID(state, id));
  return (
    <article className={styles.spaMainCardsCard}>
      <figure className={styles.spaMainCardsCardFigure}>
        <DogImage logo={card.dog} />
        <DogFact fact={card.fact} />
        <Buttons id={card.id} liked={card.liked} />
      </figure>
    </article>
  );
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç. –ù–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –ª–∏—à—å id.
 * –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–∏—Ä–ø–∏—á–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –ª–∏—à—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */
function Main() {
  const data = useAppSelector(selectID, shallowEqual);

  const cards = data.map((id) => (
    <Card key={id} id={id} />
  ));

  if (!window.CSS.supports('grid-template-rows', 'masonry')) {
    const Masonry = React.lazy(() => import('react-masonry-css'));
    return (
      <main className={styles.spaMain}>
        <Suspense fallback={<div>Loading layout...</div>}>
          <Masonry
            className={styles.masonryGrid}
            breakpointCols={{
              default: 7, 450: 1, 700: 2, 950: 3, 1150: 4, 1400: 5, 1600: 6,
            }}
            columnClassName={styles.masonryGridColumn}
          >
            {cards}
          </Masonry>
        </Suspense>
      </main>
    );
  }

  return (
    <main
      className={styles.spaMain}
    >
      <section className={styles.spaMainCards}>
        {cards}
      </section>
    </main>
  );
}

export default Main;
